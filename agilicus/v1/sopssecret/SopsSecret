#!/usr/bin/env /usr/bin/python3

import sys
import yaml
import shutil
import os
import subprocess
import logging

logging.basicConfig(filename='/tmp/sopssecret.log', level=logging.DEBUG)

with open(sys.argv[1], 'r') as stream:
    try:
        cfg = yaml.safe_load(stream)
    except yaml.YAMLError as exc:
        print("Error parsing SopsSecret input (%s)", file=sys.stderr)
        sys.exit(1)


def find_file(f):
    """ if file is in current dir, return it, else return it from the PWD.
        Why? Kustomize changes directory, but leaves PWD alone. This allows
        us to have secrets.enc.yaml in the kustomization dir, or deploy
        dir
    """
    try:
        os.stat(f)
        return f
    except FileNotFoundError:
        return os.path.join(os.environ['PWD'], f)

def sops_fetch(cfg):
    sops = shutil.which(
        "sops", path="/bin:/usr/bin:/snap/bin:%s/go/bin" % os.path.expanduser("~")
    )
    if not sops:
        print("Error in SopsSecret: sops not on path", file=sys.stderr)
        sys.exit(1)

    if "secret_source" not in cfg:
        print("Error in SopsSecret: secret_source value is missing", file=sys.stderr)
        sys.exit(1)

    sfile = find_file(cfg["secret_source"])
    try:
        with subprocess.Popen(
            [sops, "-d", sfile], stdout=subprocess.PIPE
        ) as f:

            secrets = yaml.safe_load(f.stdout)
    except subprocess.CalledProcessError as exc:
        print(
            "Is your secret-file %s in %s dir?" % (cfg["secret_source"], os.getcwd()),
            file=sys.stderr,
        )
        print(f"Error calling sops: {exc}", file=sys.stderr)
        sys.exit(1)

    if not secrets:
        print("Error: secrets is empty", file=sys.stderr)
        sys.exit(1)
    return secrets

secret = sops_fetch(cfg)

if 'namespace' in cfg['metadata']:
    secret['metadata']['namespace'] = cfg['metadata']['namespace']

if 'name' in cfg['metadata']:
    secret['metadata']['name'] = cfg['metadata']['name']

print("---")
print(yaml.dump(secret, default_flow_style=False))
